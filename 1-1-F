#include <fstream>
#include <vector>
using namespace std;
 
 
vector<int> a;
vector<int> c;
void merge(int low, int high, int middle);
void msort(int low, int high)
{
    int middle;
    if (low < high)
    {
        middle = (low + high) / 2;
        msort(low, middle);
        msort(middle + 1, high);
        merge(low, high, middle);
    }
    return;
}
 
long long count;
void merge(int low, int high, int middle)
{
    int i, j, k;
    i = low;
    k = low;
    j = middle + 1;
    while (i <= middle && j <= high)
    {
        if (a[i] < a[j])
        {
            c[k] = a[i];
            k++;
            i++;
        }
        else
        {
            c[k] = a[j];
            k++;
            j++;
            count += (long long) middle - (long long) i + 1LL;
        }
    }
    while (i <= middle)
    {
        c[k] = a[i];
        k++;
        i++;
    }
    while (j <= high)
    {
        c[k] = a[j];
        k++;
        j++;
    }
    for (i = low; i < k; i++)
    {
        a[i] = c[i];
    }
}
 
int main()
{
    ifstream in("inverse.in");
	  ofstream out("inverse.out");
    int n;
    in >> n;
    count = 0;
    a.resize(n);
    c.resize(n);
    for (int i = 0; i < n; i++)
    {
        in >> a[i];
    }
    msort(0, n - 1);
    out << count << endl;
}
